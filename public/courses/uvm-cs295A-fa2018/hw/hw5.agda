{-
Name: ‚Åá
Date: ‚Åá

Collaboration Statement:
¬´Write your collaboration statement here‚Ä¶¬ª
-}

---------------
-- LOGISTICS --
---------------

-- To submit the assignment, upload your solution to blackboard as a
-- single .agda file.
--
-- Make sure you write your name, the date, and your collaboration
-- statement above, as indicated by the course course collaboration
-- policy:
--
--     Collaboration on the high-level ideas and approach on
--     assignments is encouraged. Copying someone else's work is not
--     allowed. Any collaboration, even at a high level, must be
--     declared when you submit your assignment. Every assignment must
--     include a collaboration statement. E.g., "I discussed
--     high-level strategies for solving problem 2 and 5 with Alex."
--     Students caught copying work are eligible for immediate failure
--     of the course and disciplinary action by the University. All
--     academic integrity misconduct will be treated according to
--     UVM's Code of Academic Integrity.
--
-- This assignment consists of a LIB section which contains relevant
-- definitions and lemmas which you should refer to throughout the
-- assignment, and an ASSIGNMENT section which contains definitions
-- and lemmas with ‚Äúholes‚Äù in them. *If you only change the code
-- within the holes and your entire assignment compiles without
-- errors, you are guaranteed 100% on the assignment.*

module hw5 where

---------
-- LIB --
---------

infix 4 _‚â°_
infixl 6 _+_ _‚à∏_
infixl 7 _*_

data _‚â°_ {A : Set} (x : A) : A ‚Üí Set where
  refl : x ‚â° x

{-# BUILTIN EQUALITY _‚â°_ #-}

sym : ‚àÄ {A : Set} {x y : A} ‚Üí x ‚â° y ‚Üí y ‚â° x
sym refl‚ÄÇ=‚ÄÇrefl

data ‚Ñï : Set where
  zero : ‚Ñï
  suc  : ‚Ñï ‚Üí ‚Ñï

{-# BUILTIN NATURAL ‚Ñï #-}

_+_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
zero    + n ‚ÄÇ=‚ÄÇ n
(suc m) + n ‚ÄÇ=‚ÄÇ suc (m + n)

_*_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
zero * n    ‚ÄÇ=‚ÄÇ zero
(suc m) * n ‚ÄÇ=‚ÄÇ n + (m * n)

_‚à∏_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
m       ‚à∏ zero    ‚ÄÇ=‚ÄÇ m
zero    ‚à∏ (suc n) ‚ÄÇ=‚ÄÇ zero
(suc m) ‚à∏ (suc n) ‚ÄÇ=‚ÄÇ m ‚à∏ n

infix 4 _‚â§_
data _‚â§_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Set where
  zero : ‚àÄ {n : ‚Ñï}
    --------------
    ‚Üí zero ‚â§ n
  suc : ‚àÄ {m n : ‚Ñï}
    ‚Üí m ‚â§ n
    -----------------
    ‚Üí suc m ‚â§ suc n

infix 4 _<_
data _<_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Set where
  zero : ‚àÄ {n : ‚Ñï}
    --------------
    ‚Üí zero < suc n
  suc : ‚àÄ {m n : ‚Ñï}
    ‚Üí m < n
    -----------------
    ‚Üí suc m < suc n

infixr 2 _√ó_
data _√ó_ : Set ‚Üí Set ‚Üí Set where
  ‚ü®_,_‚ü© : ‚àÄ {A B : Set}
    ‚Üí A
    ‚Üí B
      -----
    ‚Üí A √ó B

proj‚ÇÅ : ‚àÄ {A B : Set} ‚Üí A √ó B ‚Üí A
proj‚ÇÅ ‚ü® x , y ‚ü© = x

proj‚ÇÇ : ‚àÄ {A B : Set} ‚Üí A √ó B ‚Üí B
proj‚ÇÇ ‚ü® x , y ‚ü© = y

infix 1 _‚äé_
data _‚äé_ : Set ‚Üí Set ‚Üí Set where
  inj‚ÇÅ : ‚àÄ {A B : Set}
    ‚Üí A
      -----
    ‚Üí A ‚äé B

  inj‚ÇÇ : ‚àÄ {A B : Set}
    ‚Üí B
      -----
    ‚Üí A ‚äé B

data ‚ä§ : Set where
  tt : ‚ä§

data ‚ä• : Set where

infix 3 ¬¨_
¬¨_ : Set ‚Üí Set
¬¨ A = A ‚Üí ‚ä•

_‚â¢_ : ‚àÄ {A : Set} (x y : A) ‚Üí Set
x ‚â¢ y = ¬¨ x ‚â° y

infix 2 ‚àÉ
syntax ‚àÉ A (Œª x ‚Üí B) = ‚àÉ[ x ‚àà A ] B
data ‚àÉ (A : Set) (B : A ‚Üí Set) : Set where
  ‚ü®‚àÉ_,_‚ü© : (x : A) ‚Üí B x ‚Üí ‚àÉ A B

data ùîπ : Set where
  true  : ùîπ
  false : ùîπ

infixr 5 _‚à∑_
data List (A : Set) : Set where
  [] : List A
  _‚à∑_ : A ‚Üí List A ‚Üí List A

pattern [_] a = a ‚à∑ []
pattern [_,_] a b = a ‚à∑ [ b ]
pattern [_,_,_] a b c = a ‚à∑ [ b , c ]
pattern [_,_,_,_] a b c d = a ‚à∑ [ b , c , d ]
pattern [_,_,_,_,_] a b c d e = a ‚à∑ [ b , c , d , e ]
pattern [_,_,_,_,_,_] a b c d e f = a ‚à∑ [ b , c , d , e , f ]
pattern [_,_,_,_,_,_,_] a b c d e f g = a ‚à∑ [ b , c , d , e , f , g ]
pattern [_,_,_,_,_,_,_,_] a b c d e f g h = a ‚à∑ [ b , c , d , e , f , g , h ]
pattern [_,_,_,_,_,_,_,_,_] a b c d e f g h i = a ‚à∑ [ b , c , d , e , f , g , h , i ]
pattern [_,_,_,_,_,_,_,_,_,_] a b c d e f g h i j = a ‚à∑ [ b , c , d , e , f , g , h , i , j ]

infixl 6 _++_
_++_ : ‚àÄ {A : Set} ‚Üí List A ‚Üí List A ‚Üí List A
[] ++ ys = ys
(x ‚à∑ xs) ++ ys = x ‚à∑ (xs ++ ys)

reverse : ‚àÄ {A : Set} ‚Üí List A ‚Üí List A
reverse [] = []
reverse (x ‚à∑ xs) = reverse xs ++ [ x ]

map : ‚àÄ {A B : Set} ‚Üí (A ‚Üí B) ‚Üí List A ‚Üí List B
map f [] = []
map f (x ‚à∑ xs) = f x ‚à∑ map f xs

_‚àò_ : ‚àÄ {A B C : Set} ‚Üí (B ‚Üí C) ‚Üí (A ‚Üí B) ‚Üí (A ‚Üí C)
(g ‚àò f) x = g (f x)

postulate
  -- + --
  +-runit : ‚àÄ (m : ‚Ñï) ‚Üí m + zero ‚â° m
  +-rsuc : ‚àÄ (m n : ‚Ñï) ‚Üí m + suc n ‚â° suc (m + n)
  +-assoc : ‚àÄ (m n p : ‚Ñï) ‚Üí m + n + p ‚â° m + (n + p)
  +-comm : ‚àÄ (m n : ‚Ñï) ‚Üí m + n ‚â° n + m
  -- * --
  *-rzero : ‚àÄ (m : ‚Ñï) ‚Üí m * zero ‚â° zero
  *-runit : ‚àÄ (m : ‚Ñï) ‚Üí m * 1 ‚â° m
  *-rsuc : ‚àÄ (m n : ‚Ñï) ‚Üí m * suc n ‚â° m + m * n
  *-assoc : ‚àÄ (m n p : ‚Ñï) ‚Üí m * n * p ‚â° m * (n * p)
  *-comm : ‚àÄ (m n : ‚Ñï) ‚Üí m * n ‚â° n * m
  -- ‚â§ --
  ‚â§-refl : ‚àÄ (m : ‚Ñï) ‚Üí m ‚â§ m
  ‚â§-trans : ‚àÄ {m n p : ‚Ñï} ‚Üí n ‚â§ p ‚Üí m ‚â§ n ‚Üí m ‚â§ p
  ‚â§-antisym : ‚àÄ {m n : ‚Ñï} ‚Üí m ‚â§ n ‚Üí n ‚â§ m ‚Üí m ‚â° n
  -- lists --
  ++-runit : ‚àÄ {A : Set} (xs : List A) ‚Üí xs ++ [] ‚â° xs
  ++-assoc : ‚àÄ {A : Set} (xs ys zs : List A) ‚Üí (xs ++ ys) ++ zs ‚â° xs ++ (ys ++ zs)

postulate
  extensionality : ‚àÄ {A B : Set} {f g : A ‚Üí B} ‚Üí (‚àÄ (x : A) ‚Üí f x ‚â° g x) ‚Üí f ‚â° g

----------------
-- ASSIGNMENT --
----------------

-- E1: [‚òÖ]
-- Write a function that compares two natural numbers `m` and `n`, and
-- returns true if `m` is strictly less than `n`, and false if `m` is
-- equal to or greater than `n`.
_<?_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ
m <? n = {!!}

-- E2: [‚òÖ]
-- Verify one direction of correctness for `_<?_`: if `m` is strictly
-- less than `n`, then `m <? n` returns true
-- HINT: do induction on the evidence that `m < n`
cor[<?]-L : ‚àÄ {m n : ‚Ñï} ‚Üí m < n ‚Üí m <? n ‚â° true
cor[<?]-L Œµ = {!!}

-- E3: [‚òÖ]
-- Verify the other direction of correctness for `_<?_`: if `m <? n`
-- returns true, then `m` is strictly less than `n`.
-- HINT: do induction on `m` and `n`
cor[<?]-R : ‚àÄ (m n : ‚Ñï) ‚Üí m <? n ‚â° true ‚Üí m < n
cor[<?]-R m n Œµ = {!!}

-- E4: [‚òÖ]
-- Write a function that compares two natural numbers `m` and `n`, and
-- returns true if the numbers are the same, and false if the numbers
-- are different.
_‚â°?_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ
m ‚â°? n = {!!}

-- E5: [‚òÖ‚òÖ]
-- Verify one direction of correctness for `_‚â°?_`: if `m` and `n` are
-- equal, then `m ‚â°? n` returns true.
-- HINT: do induction on `m` and `n`
cor[‚â°?]-L : ‚àÄ (m n : ‚Ñï) ‚Üí m ‚â° n ‚Üí (m ‚â°? n ‚â° true)
cor[‚â°?]-L m n Œµ = {!!}

-- E6: [‚òÖ]
-- Verify the other direction of correctness for `_‚â°?_`: if `m ‚â°? n`
-- returns true, then `m` and `n` are equal.
-- HINT: do induction on `m` and `n`
cor[‚â°?]-R : ‚àÄ (m n : ‚Ñï) ‚Üí (m ‚â°? n ‚â° true) ‚Üí m ‚â° n
cor[‚â°?]-R m n Œµ = {!!}

-- E7: [‚òÖ‚òÖ‚òÖ]
-- Prove that if you reverse the concatenation of two lists, it's the
-- same as concatenating the reversal of each list (in reverse order)
-- HINT: do induction on `xs`; use ++-runit and ++-assoc
reverse-++-dist : ‚àÄ {A : Set} (xs ys : List A) ‚Üí reverse (xs ++ ys) ‚â° reverse ys ++ reverse xs
reverse-++-dist xs ys = {!!}

-- E8: [‚òÖ‚òÖ]
-- Prove that if you reverse a list twice, you get the list you
-- started with.
-- HINT: do induction on `xs`; use reverse-++-dist
reverse-involutive : ‚àÄ {A : Set} (xs : List A) ‚Üí reverse (reverse xs) ‚â° xs
reverse-involutive xs = {!!}

-- E9: [‚òÖ‚òÖ]
-- Prove that if you map the composition of functions, it is the same
-- as composing the map of those functions
-- HINT: do induction on xs
map-‚àò-dist : ‚àÄ {A B C : Set} (g : B ‚Üí C) (f : A ‚Üí B) (xs : List A) ‚Üí map (g ‚àò f) xs ‚â° (map g ‚àò map f) xs
map-‚àò-dist g f xs = {!!}

-- E10: [‚òÖ‚òÖ]
-- Prove that if you map onto the concatenation of lists, it's the
-- same as the concatenation of mapped lists.
-- HINT: do induction on xs
map-++-dist : ‚àÄ {A B : Set} (f : A ‚Üí B) (xs ys : List A) ‚Üí map f (xs ++ ys) ‚â° map f xs ++ map f ys
map-++-dist f xs ys = {!!}
