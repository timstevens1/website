In this paper we show that definitional interpreters for programming languages
can express not only the usual notion of interpretation, but also a wide
variety of collecting semantics, abstract interpretations, symbolic executions
and their intermixings. To achieve this we reconstruct a standard definitional
interpreter using two new ingredients: monadic operations and open recursion.
The resulting definitional *abstract* interpreter is extensible and we recover
various abstract semantics through its instantiations.

In addition to recovering well-known abstractions, we show that the resulting
abstract interpreter is perfectly precise in modeling call and return flows,
i.e. it implements Pushdown Control Flow Analysis (PDCFA). True to the
definitional style of Reynolds, the abstract interpreter contains no explicit
mechanics to achieve this property; it is simply inherited from the defining
metalanguage.

In addition to demonstrating our technique, we formalize a systematic
methodology for deriving definitional abstract interpreters, prove it sound,
and make precise its relationship to PDCFA.
